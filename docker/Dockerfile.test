# Multi-stage Dockerfile for testing cross-compilation builds
ARG RUST_VERSION=latest
FROM rust:${RUST_VERSION} as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    build-essential \
    curl \
    git \
    file \
    && rm -rf /var/lib/apt/lists/*

# Install cross for cross-compilation
# Use stable version if git version fails
RUN cargo install cross --git https://github.com/cross-rs/cross || \
    cargo install cross

WORKDIR /app

# Copy dependency manifests first for better layer caching
COPY Cargo.toml Cargo.lock ./
COPY Cross.toml ./

# Copy source code
COPY . .

# Install all required targets
RUN rustup target add x86_64-unknown-linux-gnu && \
    rustup target add x86_64-unknown-linux-musl && \
    rustup target add aarch64-unknown-linux-gnu

# Test build stage - Linux targets only
FROM base as test-linux
RUN echo "Testing Linux builds..." && \
    cargo build --release --target x86_64-unknown-linux-gnu && \
    cross build --release --target x86_64-unknown-linux-musl && \
    cross build --release --target aarch64-unknown-linux-gnu

# Verification stage
FROM base as verify
COPY scripts/test-builds.sh .
RUN chmod +x test-builds.sh
RUN ./test-builds.sh

# Final stage with all artifacts
FROM scratch as artifacts
COPY --from=verify /app/target/ /artifacts/

use super::types::{TreeNode, NodeType};

impl super::BrowseScreen {
    pub fn get_demo_children(&self, parent_id: &str, level: usize, parent_path: &str) -> Vec<TreeNode> {
        match parent_id {
            "i=85" => vec![ // Objects
                TreeNode {
                    name: "Server".to_string(),
                    node_id: "i=2253".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "DeviceSet".to_string(),
                    node_id: "i=5001".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "Simulation".to_string(),
                    node_id: "ns=2;s=Simulation".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "DataAccess".to_string(),
                    node_id: "ns=2;s=DataAccess".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
            ],
            "i=86" => vec![ // Types
                TreeNode {
                    name: "ObjectTypes".to_string(),
                    node_id: "i=58".to_string(),
                    node_type: NodeType::ObjectType,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "VariableTypes".to_string(),
                    node_id: "i=62".to_string(),
                    node_type: NodeType::VariableType,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "DataTypes".to_string(),
                    node_id: "i=22".to_string(),
                    node_type: NodeType::DataType,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "ReferenceTypes".to_string(),
                    node_id: "i=31".to_string(),
                    node_type: NodeType::ReferenceType,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
            ],
            "i=2253" => vec![ // Server
                TreeNode {
                    name: "ServerCapabilities".to_string(),
                    node_id: "i=2268".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "ServerDiagnostics".to_string(),
                    node_id: "i=2274".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "VendorServerInfo".to_string(),
                    node_id: "i=2295".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: false,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "ServerRedundancy".to_string(),
                    node_id: "i=2296".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: false,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
            ],
            "ns=2;s=Simulation" => vec![ // Simulation
                TreeNode {
                    name: "Random".to_string(),
                    node_id: "ns=2;s=Simulation.Random".to_string(),
                    node_type: NodeType::Variable,
                    level,
                    has_children: false,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "Sinusoid".to_string(),
                    node_id: "ns=2;s=Simulation.Sinusoid".to_string(),
                    node_type: NodeType::Variable,
                    level,
                    has_children: false,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "Ramp".to_string(),
                    node_id: "ns=2;s=Simulation.Ramp".to_string(),
                    node_type: NodeType::Variable,
                    level,
                    has_children: false,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
            ],
            "ns=2;s=DataAccess" => vec![ // DataAccess
                TreeNode {
                    name: "AnalogType".to_string(),
                    node_id: "ns=2;s=DataAccess.AnalogType".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "TwoStateDiscreteType".to_string(),
                    node_id: "ns=2;s=DataAccess.TwoStateDiscreteType".to_string(),
                    node_type: NodeType::Object,
                    level,
                    has_children: true,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
            ],
            _ => vec![ // Default children for any other node
                TreeNode {
                    name: "Value".to_string(),
                    node_id: format!("{}.Value", parent_id),
                    node_type: NodeType::Variable,
                    level,
                    has_children: false,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
                TreeNode {
                    name: "Timestamp".to_string(),
                    node_id: format!("{}.Timestamp", parent_id),
                    node_type: NodeType::Variable,
                    level,
                    has_children: false,
                    is_expanded: false,
                    parent_path: parent_path.to_string(),
                },
            ],
        }
    }
}

name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            name: opcua-client-linux-x86_64
            
          # Windows targets  
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: opcua-client-windows-x86_64
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: opcua-client-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: opcua-client-macos-aarch64

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.name }}.tar.gz opcua-client
        echo "ASSET=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.name }}.zip opcua-client.exe
        echo "ASSET=${{ matrix.name }}.zip" >> $env:GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: target/${{ matrix.target }}/release/${{ env.ASSET }}
        if-no-files-found: error

  # Separate job for cross-compilation builds
  cross-build:
    name: Cross Build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # Only include well-supported cross-compilation targets
          - target: aarch64-unknown-linux-gnu
            name: opcua-client-linux-aarch64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      uses: taiki-e/install-action@cross

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cross-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cross build --release --target ${{ matrix.target }}

    - name: Package binary
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.name }}.tar.gz opcua-client
        echo "ASSET=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: target/${{ matrix.target }}/release/${{ env.ASSET }}
        if-no-files-found: error

  release:
    name: Create Release
    needs: [build, cross-build]
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -R artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        generate_release_notes: true
        files: artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

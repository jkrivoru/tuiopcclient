name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: opcua-client-linux-x86_64
            cross: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: opcua-client-linux-x86_64-musl
            cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: opcua-client-linux-aarch64
            cross: true
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: opcua-client-windows-x86_64
            cross: false
          - target: i686-pc-windows-msvc
            os: windows-latest
            name: opcua-client-windows-i686
            cross: true
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: opcua-client-macos-x86_64
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            name: opcua-client-macos-aarch64
            cross: true

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross (if needed)
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash

    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.name }}.tar.gz opcua-client
        echo "ASSET=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
        echo "ASSET_MIME=application/gzip" >> $GITHUB_ENV

    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.name }}.zip opcua-client.exe
        echo "ASSET=${{ matrix.name }}.zip" >> $env:GITHUB_ENV
        echo "ASSET_MIME=application/zip" >> $env:GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.target }}/release/${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: ${{ env.ASSET_MIME }}

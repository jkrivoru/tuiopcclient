name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: opcua-client-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: opcua-client-linux-x86_64-musl
            use-cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: opcua-client-linux-aarch64
            use-cross: true
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: opcua-client-windows-x86_64
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: opcua-client-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: opcua-client-macos-aarch64

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.use-cross
      uses: taiki-e/install-action@cross

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.target }}-cargo-

    - name: Build binary
      run: |
        if [[ "${{ matrix.use-cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash

    - name: Get binary extension
      id: binary_ext
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "ext=.exe" >> $GITHUB_OUTPUT
        else
          echo "ext=" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Package binary
      run: |
        binary_name="opcua-client${{ steps.binary_ext.outputs.ext }}"
        cd target/${{ matrix.target }}/release
        
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ${{ matrix.name }}.zip $binary_name
          echo "ASSET=${{ matrix.name }}.zip" >> $GITHUB_ENV
        else
          tar czf ${{ matrix.name }}.tar.gz $binary_name
          echo "ASSET=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: target/${{ matrix.target }}/release/${{ env.ASSET }}
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -R artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        generate_release_notes: true
        files: artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
